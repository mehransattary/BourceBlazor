@page "/NomadAction/{insCode}/{nomadDate:int}/{NomadName}"
@page "/NomadAction"
@rendermode InteractiveWebAssembly
@attribute [Authorize]

<PageTitle>
    معاملات
    @Title
</PageTitle>

<div class="row mb-2">

    <div class="row">

        <div class="col-md-2 col-12">
            <Icon Name="IconName.ColumnsGap" Size="IconSize.x4" @onclick="ToggleContentAsync" Class="mb-1" />
        </div>
        <!--نماد-->
        <div class="col-md-4 col-12 mt-2">
            <SearchNomad EventCallbackInstrumentSearch="GetEventCallbackInstrumentSearch" NomadName="@NomadName" />
        </div>

        <!--تاریخ-->
        <div class="col-md-4  col-12 mt-2">
            <SearchDate InsCode="@InsCode" EventCallbackOnChangeDate="GetEventCallbackOnChangeDate" NomadDate="@NomadDate" />
        </div>


        <!--بازگشت-->
        <div class="col-md-2 col-12 mt-2" style="text-align:end">

            @{
                var validationBackNomadDate = !string.IsNullOrEmpty(InsCode) &&
                !string.IsNullOrEmpty(NomadName);
            }

            @if (validationBackNomadDate)
            {
                <Button TooltipTitle="بازگشت به تاریخ ها" Outline="true" Color="ButtonColor.Primary" @onclick=" ()=> GoBackNomadDate()">
                    <Icon Name="IconName.ArrowLeftSquare" />
                </Button>
            }


            @{
                var validation = !string.IsNullOrEmpty(InsCode) &&
                !string.IsNullOrEmpty(NomadName) &&
                NomadDate != 0;
            }

            @if (validation)
            {
                <Button Class="me-1" TooltipTitle="فرمول ها" Type="ButtonType.Link" Outline="true" Color="ButtonColor.Info" href=@($"Formols/{InsCode}/{NomadDate}/{NomadName}")>
                    <Icon Name="IconName.Box" />
                </Button>
            }

        </div>

    </div>

    <div class="row mt-2" style="position: fixed;bottom: 24px; z-index:111;    right: 0%;">

        <div class="col-md-4 col-6 text-end">

            @if (!string.IsNullOrEmpty(SumCount))
            {
                <!-- تعداد معاملات-->
                <Badge Color="BadgeColor.Danger" Class="me-2 p-2" IndicatorType="BadgeIndicatorType.None" Style="font-size: 17px;">
                    تعداد معاملات :

                    <span style="font-size: 19px;">
                        @SumCount
                    </span>

                </Badge>
            }
            @if (!string.IsNullOrEmpty(SumHajm))
            {
                <!-- حجم معاملات-->
                <Badge Color="BadgeColor.Primary" Class="p-2" IndicatorType="BadgeIndicatorType.None" Style="font-size: 17px;">
                    حجم معاملات :
                    <span style="font-size: 19px;">
                        @SumHajm
                    </span>

                </Badge>
            }
        </div>
    </div>

    <div class="col-md-12 col-12 mt-2">
        <Collapse @ref="collapse1">
            <Card>
                <CardBody>

                    <div class="row mt-2">

                        <!--حجم های فیلتری-->
                        <div class="col-4">
                            <InputTags Value="HajmsTags" Options="InputTagOptions" OnTagRemoved="DeleteHajm" OnTagAdded="SaveHajm" />
                        </div>                  

                        <!--از-->
                        <div class="col-md-3  col-12 ">
                            <div class="mb-3 row">
                                <label for="Skip" class="col-sm-4 col-form-label">شروع </label>
                                <div class="col-sm-8">
                                    <input @bind="Skip" placeholder="از" class="form-control" min="0" id="Skip" />
                                </div>
                            </div>
                        </div>


                        <!--تا-->
                        <div class="col-md-3  col-12 ">
                            <div class="mb-3 row">
                                <label for="Take" class="col-sm-4 col-form-label">  تعداد </label>
                                <div class="col-sm-8">
                                    <input @bind="Take" placeholder="تا" class="form-control" min="0" id="Take" />
                                </div>
                            </div>
                        </div>

                        <!--اعمال-->
                        <div class="col-1" style="text-align:start">
                            <Button Outline="true" Color="ButtonColor.Success" @onclick="DoFilterOnGrid"> <Icon Name="IconName.Search" />  </Button>
                        </div>

                          <!--ریلود-->
                        <div class="col-1" style="text-align:start">
                            <Button Outline="true" Color="ButtonColor.Success" @onclick="ReloadGrid"> <Icon Name="IconName.ArrowCounterclockwise" />  </Button>
                        </div>

                    </div>

                    <FormolsByCode IsCleanNomad="IsCleanNomad"
                                   IsChangeFormols="ISChangeFormols"
                                   InsCode="@InsCode"
                                   TradeHistories="TradeHistories"
                                   EventCallbackSelectedFormolSwitches="GetEventCallbackSelectedFormolSwitches" />

                    <div class="row mt-3 text-end">

                        @if (SeletedFormolSwitches.Any())
                        {
                            <!--اعمال-->
                            <div class="col-12 mt-3">

                                <Button Outline="true" Color="ButtonColor.Success" @onclick="()=>GetFilterByFormol(false)">
                                    <Icon Name="IconName.CheckCircleFill" />  اعمال معاملات واقعی
                                </Button>

                                <Button Outline="true" Color="ButtonColor.Danger" @onclick="()=>GetFilterByFormol(true)">
                                    <Icon Name="IconName.TrashFill" /> اعمال معاملات حذف شده
                                </Button>

                            </div>
                        }

                    </div>

                </CardBody>
            </Card>
        </Collapse>
    </div>

</div>




@if (IsLoad)
{
    <div class="text-center loader">
        <Spinner Type="SpinnerType.Dots" Class="me-3" Color="SpinnerColor.Primary" Size="SpinnerSize.Large" />
    </div>
}

<Grid @ref="grid"
      TItem="TradeHistory"
      Data="TradeHistories"
      Class="table table-hover table-bordered table-striped mt-3  gridNomadActions"
      DataProvider="GetDataProvider"
      AllowFiltering="true"
      AllowSorting="true"
      AllowSelection="false"
      Responsive="true"
      AllowPaging="true"
      PageSize="100"
      PageSizeSelectorVisible
      PaginationItemsTextFormat="{0} - {1} از {2} ردیف"
      PageSizeSelectorItems="[5,10,15,100,200,300]"
      ItemsPerPageText="تعداد نمایش"
      EmptyText="اطلاعاتی وجود ندارد"
      HeaderRowCssClass="bg-primary text-white border-bottom-0"
      FiltersRowCssClass="bg-primary text-white bg-opacity-25 border-bottom-0">   

    <GridColumn ColumnClass="@(x =>x.GroupDeleteColorName)" TItem="TradeHistory" HeaderText="#" PropertyName="Counter" SortKeySelector="item => item.Counter">
        @context.Counter

    </GridColumn>

    <GridColumn ColumnClass="@(x =>x.GroupDeleteColorName)" TItem="TradeHistory" HeaderText="ردیف" PropertyName="nTran" SortKeySelector="item => item.nTran">
        @context.nTran

    </GridColumn>

    <GridColumn ColumnClass="@(x =>x.GroupDeleteColorName)" TItem="TradeHistory" HeaderText=" زمان" PropertyName="hEven" SortKeySelector="item => item.hEven">
        @context.hEven.ToTime()

    </GridColumn>

    <GridColumn ColumnClass="@(x =>x.GroupDeleteColorName)" TItem="TradeHistory" HeaderText="حجم" PropertyName="qTitTran" SortKeySelector="item => item.qTitTran">
        @context.qTitTran.ToString("#,0")

    </GridColumn>

    <GridColumn ColumnClass="@(x =>x.GroupDeleteColorName)" TItem="TradeHistory" HeaderText="قیمت" PropertyName="pTran" SortKeySelector="item => item.pTran">
        @context.pTran.ToString("#,0")

    </GridColumn>

    <GridColumn ColumnClass="@(x =>x.GroupDeleteColorName)" TItem="TradeHistory" HeaderText=" وضعیت" PropertyName="canceled" SortKeySelector="item => item.canceled">
        @(context.canceled == 0 ? "فعال" : "غیر فعال ")

    </GridColumn>

</Grid>


